from tkinter import*
from tkinter import ttk
from PIL import Image, ImageTk
from tkinter import messagebox
import mysql.connector
from cv2 import cv2


class Student:
    def __init__(self, root):
        self.root = root
        self.root.geometry = ("1366x768+0+0")
        self.root.title("Student Details")

        # text variables
        self.var_dep = StringVar()
        self.var_course = StringVar()
        self.var_year = StringVar()
        self.var_semester = StringVar()
        self.var_std_id = StringVar()
        self.var_std_name = StringVar()
        self.var_div = StringVar()
        self.var_roll = StringVar()
        self.var_gender = StringVar()
        self.var_dob = StringVar()
        self.var_email = StringVar()
        self.var_phone = StringVar()
        self.var_address = StringVar()
        self.var_teacher = StringVar()

        # first image
        img = Image.open(r"D:\face\clg_img\img\smart-attendance.jpg")
        img = img.resize((455, 115), Image.ANTIALIAS)
        self.photoimage = ImageTk.PhotoImage(img)

        f_lbl = Label(self.root, image=self.photoimage)
        f_lbl.place(x=0, y=0, width=455, height=115)

        # second image
        img1 = Image.open(r"D:\face\clg_img\img\clg.jpg")
        img1 = img1.resize((456, 115), Image.ANTIALIAS)
        self.photoimage1 = ImageTk.PhotoImage(img1)

        f_lbl1 = Label(self.root, image=self.photoimage1)
        f_lbl1.place(x=455, y=0, width=455, height=115)

        # third image
        img2 = Image.open(r"D:\face\clg_img\img\student.jpg")
        img2 = img2.resize((455, 115), Image.ANTIALIAS)
        self.photoimage2 = ImageTk.PhotoImage(img2)

        f_lbl2 = Label(self.root, image=self.photoimage2)
        f_lbl2.place(x=911, y=0, width=456, height=115)

        # bg image
        img3 = Image.open(r"D:\face\clg_img\img\bg.jpg")
        img3 = img3.resize((1366, 653), Image.ANTIALIAS)
        self.photoimage3 = ImageTk.PhotoImage(img3)

        bg_img = Label(self.root, image=self.photoimage3)
        bg_img.place(x=0, y=115, width=1366, height=653)

        # title on bg image
        title_lbl = Label(bg_img, text="STUDENT MANAGEMENT SYSTEM",
                          font=("times new roman", 35, "bold"), bg="white", fg="darkgreen")
        title_lbl.place(x=0, y=0, width=1366, height=38)

        # frame
        main_frame = Frame(bg_img, bd=2, bg="white")
        main_frame.place(x=7, y=42, width=1350, height=540)

        # left lable frame
        left_frame = LabelFrame(main_frame, bd=2, bg="white", relief=RIDGE, text="Student Details",
                                font=("times new roman", 10, "bold"))
        left_frame.place(x=10, y=10, width=660, height=520)

        img_left = Image.open(
            r"D:\face\clg_img\img\1_5TRuG7tG0KrZJXKoFtHlSg.jpeg")
        img_left = img_left.resize((645, 115), Image.ANTIALIAS)
        self.photoimage_left = ImageTk.PhotoImage(img_left)

        left_lbl = Label(left_frame, image=self.photoimage_left)
        left_lbl.place(x=5, y=0, width=645, height=115)

        # Current course
        current_course = LabelFrame(left_frame, bd=2, bg="white", relief=RIDGE, text="Current Course Information",
                                    font=("times new roman", 10, "bold"))
        current_course.place(x=5, y=120, width=645, height=100)

        # department
        dept_lable = Label(current_course, text="Department", font=(
            "times new roman", 10, "bold"), bg="white")
        dept_lable.grid(row=0, column=0, padx=10, sticky=W)

        dept_combo = ttk.Combobox(current_course, textvariable=self.var_dep, font=(
            "times new roman", 10, "bold"), state="readonly", width=15)
        dept_combo["values"] = ("Select Department",
                                "CSE", "ECE", "EE", "Civil", "Mechanical")
        dept_combo.current(0)
        dept_combo.grid(row=0, column=1, padx=2, pady=10, sticky=W)

        # course
        course_lable = Label(current_course, text="Course", font=(
            "times new roman", 10, "bold"), bg="white")
        course_lable.grid(row=0, column=2, padx=10, sticky=W)

        course_combo = ttk.Combobox(current_course, textvariable=self.var_course, font=(
            "times new roman", 10, "bold"), state="readonly", width=15)
        course_combo["values"] = (
            "Select Course", "BEE", "HUMANTIES", "Programming", "Physics", "Mathematics")
        course_combo.current(0)
        course_combo.grid(row=0, column=3, padx=2, pady=10, sticky=W)

        # Year
        Year_lable = Label(current_course, text="Year", font=(
            "times new roman", 10, "bold"), bg="white")
        Year_lable.grid(row=1, column=0, padx=10, sticky=W)

        Year_combo = ttk.Combobox(current_course, textvariable=self.var_year, font=(
            "times new roman", 10, "bold"), state="readonly", width=15)
        Year_combo["values"] = ("Select Year", "2020-21",
                                "2021-22", "2022-23", "2023-24")
        Year_combo.current(0)
        Year_combo.grid(row=1, column=1, padx=2, pady=10, sticky=W)

        # Semester
        Semester_lable = Label(current_course, text="Semester", font=(
            "times new roman", 10, "bold"), bg="white")
        Semester_lable.grid(row=1, column=2, padx=10, sticky=W)

        Semester_combo = ttk.Combobox(current_course, textvariable=self.var_semester, font=(
            "times new roman", 10, "bold"), state="readonly", width=15)
        Semester_combo["values"] = (
            "Select Semester", "Semester-1", "Semester-2")
        Semester_combo.current(0)
        Semester_combo.grid(row=1, column=3, padx=2, pady=10, sticky=W)

        # Class_Student_Information
        Class_Student_frame = LabelFrame(left_frame, bd=2, bg="white", relief=RIDGE,
                                         text="Class Student Information",
                                         font=("times new roman", 10, "bold"))
        Class_Student_frame.place(x=5, y=225, width=645, height=270)

        # student id
        id_lable = Label(Class_Student_frame, text="Student ID :", font=(
            "times new roman", 10, "bold"), bg="white")
        id_lable.grid(row=0, column=0, padx=10, pady=5, sticky=W)

        id_entry_label = ttk.Entry(Class_Student_frame, textvariable=self.var_std_id, width=20, font=(
            "times new roman", 10, "bold"))
        id_entry_label.grid(row=0, column=1, padx=10, pady=5, sticky=W)

        # student name
        name_lable = Label(Class_Student_frame, text="Student Name :", font=(
            "times new roman", 10, "bold"), bg="white")
        name_lable.grid(row=0, column=2, padx=10, pady=5, sticky=W)

        name_entry_label = ttk.Entry(
            Class_Student_frame, textvariable=self.var_std_name, width=20, font=("times new roman", 10, "bold"))
        name_entry_label.grid(row=0, column=3, padx=10, pady=5, sticky=W)

        # class division
        division_lable = Label(Class_Student_frame, text="Class Division :", font=("times new roman", 10, "bold"),
                               bg="white")
        division_lable.grid(row=1, column=0, padx=10, pady=5, sticky=W)

        div_combo = ttk.Combobox(Class_Student_frame, textvariable=self.var_div, font=(
            "times new roman", 10, "bold"), state="readonly", width=17)
        div_combo["values"] = ("Select Division", "A",
                               "B", "C")
        div_combo.current(0)
        div_combo.grid(row=1, column=1, padx=10, pady=5, sticky=W)

        # Roll No.
        rollno_lable = Label(Class_Student_frame, text="Roll No. :", font=(
            "times new roman", 10, "bold"), bg="white")
        rollno_lable.grid(row=1, column=2, padx=10, pady=5, sticky=W)

        rollno_entry_label = ttk.Entry(
            Class_Student_frame, textvariable=self.var_roll, width=20, font=("times new roman", 10, "bold"))
        rollno_entry_label.grid(row=1, column=3, padx=10, pady=5, sticky=W)

        # Gender
        Gender_lable = Label(Class_Student_frame, text="Gender :", font=(
            "times new roman", 10, "bold"), bg="white")
        Gender_lable.grid(row=2, column=0, padx=10, pady=5, sticky=W)

        gender_combo = ttk.Combobox(Class_Student_frame, textvariable=self.var_gender, font=(
            "times new roman", 10, "bold"), state="readonly", width=17)
        gender_combo["values"] = ("Select Gender", "Male",
                                  "Female", "Other")
        gender_combo.current(0)
        gender_combo.grid(row=2, column=1, padx=10, pady=5, sticky=W)

        # D.O.B
        dob_lable = Label(Class_Student_frame, text="D.O.B :", font=(
            "times new roman", 10, "bold"), bg="white")
        dob_lable.grid(row=2, column=2, padx=10, pady=5, sticky=W)

        dob_entry_label = ttk.Entry(Class_Student_frame, textvariable=self.var_dob, width=20, font=(
            "times new roman", 10, "bold"))
        dob_entry_label.grid(row=2, column=3, padx=10, pady=5, sticky=W)

        # E-mail
        mail_lable = Label(Class_Student_frame, text="E-mail :",
                           font=("times new roman", 10, "bold"), bg="white")
        mail_lable.grid(row=3, column=0, padx=10, pady=5, sticky=W)

        mail_entry_label = ttk.Entry(
            Class_Student_frame, textvariable=self.var_email, width=20, font=("times new roman", 10, "bold"))
        mail_entry_label.grid(row=3, column=1, padx=10, pady=5, sticky=W)

        # Phone No.
        pn_lable = Label(Class_Student_frame, text="Phone No. :", font=(
            "times new roman", 10, "bold"), bg="white")
        pn_lable.grid(row=3, column=2, padx=10, pady=5, sticky=W)

        pn_entry_label = ttk.Entry(Class_Student_frame, textvariable=self.var_phone, width=20, font=(
            "times new roman", 10, "bold"))
        pn_entry_label.grid(row=3, column=3, padx=10, pady=5, sticky=W)

        # Address
        addr_lable = Label(Class_Student_frame, text="Address :", font=(
            "times new roman", 10, "bold"), bg="white")
        addr_lable.grid(row=4, column=0, padx=10, pady=5, sticky=W)

        addr_entry_label = ttk.Entry(
            Class_Student_frame, textvariable=self.var_address, width=20, font=("times new roman", 10, "bold"))
        addr_entry_label.grid(row=4, column=1, padx=10, pady=5, sticky=W)

        # Teacher's Name
        tne_lable = Label(Class_Student_frame, text="Teacher's Name :", font=("times new roman", 10, "bold"),
                          bg="white")
        tne_lable.grid(row=4, column=2, padx=10, pady=5, sticky=W)

        tne_entry_label = ttk.Entry(Class_Student_frame, textvariable=self.var_teacher, width=20, font=(
            "times new roman", 10, "bold"))
        tne_entry_label.grid(row=4, column=3, padx=10, pady=5, sticky=W)

        # radio button
        self.var_r1 = StringVar()
        rb1 = ttk.Radiobutton(
            Class_Student_frame, variable=self.var_r1, text="Take Photo Sample", value="Yes")
        rb1.grid(row=6, column=0)

        rb2 = ttk.Radiobutton(
            Class_Student_frame, variable=self.var_r1, text="No Photo Sample", value="No")
        rb2.grid(row=6, column=1)

        # button frame
        btn_frame = Frame(Class_Student_frame, bd=2, relief=RIDGE, bg="white")
        btn_frame.place(x=5, y=180, width=630, height=33)

        save_btn = Button(btn_frame, command=self.fill_data, text="Save", width=21, font=(
            "times new roman", 10, "bold"), bg="blue", fg="white")
        save_btn.grid(row=0, column=0, pady=1)

        update_btn = Button(btn_frame, command=self.up_data, text="Update", width=21, font=("times new roman", 10, "bold"), bg="blue",
                            fg="white")
        update_btn.grid(row=0, column=1, pady=1)

        delete_btn = Button(btn_frame, command=self.del_but, text="Delete", width=21, font=("times new roman", 10, "bold"), bg="blue",
                            fg="white")
        delete_btn.grid(row=0, column=2, pady=1)

        reset_btn = Button(btn_frame, command=self.rest_data, text="Reset", width=21, font=("times new roman", 10, "bold"), bg="blue",
                           fg="white")
        reset_btn.grid(row=0, column=3, pady=1)

        # 2nd button frame
        btn1_frame = Frame(Class_Student_frame, bd=2, relief=RIDGE, bg="white")
        btn1_frame.place(x=5, y=216, width=630, height=33)

        take_photo_btn = Button(btn1_frame, command=self.gen_data, text="Take Photo Sample", width=43, font=("times new roman", 10, "bold"),
                                bg="blue", fg="white")
        take_photo_btn.grid(row=0, column=0, pady=1)

        update_photo_btn = Button(btn1_frame, text="Update Photo Sample", width=44,
                                  font=("times new roman", 10, "bold"), bg="blue", fg="white")
        update_photo_btn.grid(row=0, column=1, pady=1)

        # Right lable frame
        right_frame = LabelFrame(main_frame, bd=2, bg="white", relief=RIDGE, text="Student Details",
                                 font=("times new roman", 10, "bold"))
        right_frame.place(x=680, y=10, width=660, height=520)

        img_right = Image.open(r"D:\face\clg_img\img\girl.jpeg")
        img_right = img_right.resize((645, 115), Image.ANTIALIAS)
        self.photoimage_right = ImageTk.PhotoImage(img_right)

        right_lbl = Label(right_frame, image=self.photoimage_right)
        right_lbl.place(x=5, y=0, width=645, height=115)

        # search system
        search_Student_frame = LabelFrame(right_frame, bd=2, bg="white", relief=RIDGE,
                                          text="Search System",
                                          font=("times new roman", 10, "bold"))
        search_Student_frame.place(x=5, y=120, width=645, height=70)

        search_lable = Label(search_Student_frame, text="Search By ", font=(
            "times new roman", 10, "bold"), bg="white")
        search_lable.grid(row=0, column=0, padx=10, pady=5, sticky=W)

        search_combo = ttk.Combobox(search_Student_frame, font=("times new roman", 10, "bold"), state="readonly",
                                    width=15)
        search_combo["values"] = ("Select", "Roll No.", "Name")
        search_combo.current(0)
        search_combo.grid(row=0, column=1, padx=2, pady=10, sticky=W)

        sarch_entry_label = ttk.Entry(
            search_Student_frame, width=20, font=("times new roman", 10, "bold"))
        sarch_entry_label.grid(row=0, column=2, padx=10, pady=5, sticky=W)

        search_btn = Button(search_Student_frame, text="Search", width=15, font=("times new roman", 10, "bold"),
                            bg="blue", fg="white")
        search_btn.grid(row=0, column=3, padx=4)

        show_all_btn = Button(search_Student_frame, text="Show All", width=15,
                              font=("times new roman", 10, "bold"), bg="blue", fg="white")
        show_all_btn.grid(row=0, column=4, padx=4)

        # table frame
        table_frame = Frame(right_frame, bd=2, bg="white", relief=RIDGE)
        table_frame.place(x=5, y=200, width=645, height=300)

        scroll_x = ttk.Scrollbar(table_frame, orient=HORIZONTAL)
        scroll_y = ttk.Scrollbar(table_frame, orient=VERTICAL)

        self.student_table = ttk.Treeview(table_frame, column=(
            "Dept", "Course", "Year", "Sem", "ID", "Name", "Div", "Roll No.", "Gender", "DOB", "E-mail", "Phone",
            "Address","Teacher","Photo"), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM, fill=X)
        scroll_y.pack(side=RIGHT, fill=Y)
        scroll_x.config(command=self.student_table.xview)
        scroll_y.config(command=self.student_table.yview)

        self.student_table.heading("Dept", text="Department")
        self.student_table.heading("Course", text="Course")
        self.student_table.heading("Year", text="Year")
        self.student_table.heading("Sem", text="Semester")
        self.student_table.heading("ID", text="Student ID")
        self.student_table.heading("Name", text="Student Name")
        self.student_table.heading("Div", text="Division")
        self.student_table.heading("Roll No.", text="Roll No.")
        self.student_table.heading("Gender", text="Gender")
        self.student_table.heading("DOB", text="DOB")
        self.student_table.heading("E-mail", text="E-mail")
        self.student_table.heading("Phone", text="Contact No.")
        self.student_table.heading("Address", text="Address")
        self.student_table.heading("Teacher", text="Teacher")
        self.student_table.heading("Photo", text="PhotoSampleStatus")

        self.student_table.column("Dept", width=100)
        self.student_table.column("Course", width=100)
        self.student_table.column("Year", width=100)
        self.student_table.column("Sem", width=100)
        self.student_table.column("ID", width=100)
        self.student_table.column("Name", width=100)
        self.student_table.column("Div", width=100)
        self.student_table.column("Roll No.", width=100)
        self.student_table.column("Gender", width=100)
        self.student_table.column("DOB", width=100)
        self.student_table.column("E-mail", width=100)
        self.student_table.column("Phone", width=100)
        self.student_table.column("Address", width=100)
        self.student_table.column("Teacher", width=100)
        self.student_table.column("Photo", width=150)

        self.student_table["show"] = "headings"
        self.student_table.pack(fill=BOTH, expand=1)
        self.student_table.bind("<ButtonRelease>", self.update_data)
        self.fetch_data()

    # function declaration

    def fill_data(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror(
                "Error", "All Fields Are Required", parent=self.root)
        else:
            try:
                conn = mysql.connector.connect(
                    host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
                my_cursor = conn.cursor()
                my_cursor.execute("insert into student values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)", (
                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_semester.get(),
                    self.var_std_id.get(),
                    self.var_std_name.get(),
                    self.var_div.get(),
                    self.var_roll.get(),
                    self.var_gender.get(),
                    self.var_dob.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_address.get(),
                    self.var_teacher.get(),
                    self.var_r1.get()
                ))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo(
                    "Success", "Student details has been addedd Successfully", parent=self.root)
            except Exception as es:
                messagebox.showerror(
                    "Error", f"Due to : {str(es)}", parent=self.root)

    # fetch data
    def fetch_data(self):
        conn = mysql.connector.connect(
            host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
        my_cursor = conn.cursor()
        my_cursor.execute("select * from student")
        data = my_cursor.fetchall()

        if len(data) != 0:
            self.student_table.delete(*self.student_table.get_children())
            for i in data:
                self.student_table.insert("", END, values=i)
            conn.commit()
        conn.close()

    # update data cursor
    def update_data(self, event=""):
        cursor_focus = self.student_table.focus()
        content = self.student_table.item(cursor_focus)
        data = content["values"]

        self.var_dep.set(data[0]),
        self.var_course.set(data[1]),
        self.var_year.set(data[2]),
        self.var_semester.set(data[3]),
        self.var_std_id.set(data[4]),
        self.var_std_name.set(data[5]),
        self.var_div.set(data[6]),
        self.var_roll.set(data[7]),
        self.var_gender.set(data[8]),
        self.var_dob.set(data[9]),
        self.var_email.set(data[10]),
        self.var_phone.set(data[11]),
        self.var_address.set(data[12]),
        self.var_teacher.set(data[13]),
        self.var_r1.set(data[14])

    # data update function
    def up_data(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror(
                "Error", "All Fields Are Required", parent=self.root)
        else:
            try:
                updated = messagebox.askyesno(
                    "Update", "Do you want to update the details", parent=self.root)
                if updated > 0:
                    conn = mysql.connector.connect(
                        host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
                    my_cursor = conn.cursor()
                    my_cursor.execute("update student set Dep=%s,Course=%s, Year=%s,Semester=%s,Name=%s,Division=%s,Roll_No=%s,Gender=%s,DOB=%s,E_mail=%s,Phone=%s,Address=%s,Teacher=%s,Photo_Sample=%s where Student_ID=%s", (
                        self.var_dep.get(),
                        self.var_course.get(),
                        self.var_year.get(),
                        self.var_semester.get(),
                        self.var_std_name.get(),
                        self.var_div.get(),
                        self.var_roll.get(),
                        self.var_gender.get(),
                        self.var_dob.get(),
                        self.var_email.get(),
                        self.var_phone.get(),
                        self.var_address.get(),
                        self.var_teacher.get(),
                        self.var_r1.get(),
                        self.var_std_id.get()

                    ))
                else:
                    if not updated:
                        return
                messagebox.showinfo(
                    "Success", "Updated Successfully.", parent=self.root)
                conn.commit()
                self.fetch_data()
                conn.close()
            except Exception as es:
                messagebox.showerror(
                    "Error", f"Due to : {str(es)}", parent=self.root)

    # delete function
    def del_but(self):
        if self.var_std_id.get() == "":
            messagebox.showerror(
                "Error", "Student ID is required", parent=self.root)
        else:
            try:
                delt = messagebox.askyesno(
                    "Warnng!", "Do you want to delete this data?", parent=self.root)
                if delt > 0:
                    conn = mysql.connector.connect(
                        host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
                    my_cursor = conn.cursor()
                    que = "delete from student where Student_ID=%s"
                    val = (self.var_std_id.get(),)
                    my_cursor.execute(que, val)
                else:
                    if not delt:
                        return
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo(
                    "Deleted", "Details deleted successfully", parent=self.root)
            except Exception as es:
                messagebox.showerror(
                    "Error", f"Due to : {str(es)}", parent=self.root)
    # reset data

    def rest_data(self):
        self.var_dep.set("Select Department")
        self.var_course.set("Select Course")
        self.var_year.set("Select Year")
        self.var_semester.set("Select Semester")
        self.var_std_id.set("")
        self.var_std_name.set("")
        self.var_div.set("Select Division")
        self.var_roll.set("")
        self.var_gender.set("Select Gender")
        self.var_dob.set("")
        self.var_email.set("")
        self.var_phone.set("")
        self.var_address.set("")
        self.var_teacher.set("")
        self.var_r1.set("")

    # genearate dataset and photo Sample
    def gen_data(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror(
                "Error", "All Fields Are Required", parent=self.root)
        else:
            try:
                conn = mysql.connector.connect(
                    host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
                my_cursor = conn.cursor()
                my_cursor.execute("select * from student")
                fetching_all = my_cursor.fetchall()
                id = 0
                for i in fetching_all:
                    id += 1
                my_cursor.execute("update student set Dep=%s,Course=%s, Year=%s,Semester=%s,Name=%s,Division=%s,Roll_No=%s,Gender=%s,DOB=%s,E_mail=%s,Phone=%s,Address=%s,Teacher=%s,Photo_Sample=%s where Student_ID=%s", (
                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_semester.get(),
                    self.var_std_name.get(),
                    self.var_div.get(),
                    self.var_roll.get(),
                    self.var_gender.get(),
                    self.var_dob.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_address.get(),
                    self.var_teacher.get(),
                    self.var_r1.get(),
                    self.var_std_id.get() == id+1

                ))
                conn.commit()
                self.fetch_data()
                self.rest_data
                conn.close()

                face_classifier = cv2.CascadeClassifier(
                    r"C:\Users\HP\face_recognition_system\haarcascade_frontalface_default.xml")

                def img_cropped(img):
                    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                    faces = face_classifier.detectMultiScale(gray,1.3,5)

                    for (x, y, w, h) in faces:
                        img_cropped = img[y:y+h, x:x+w]
                        return img_cropped

                vid_cap = cv2.VideoCapture(0)
                img_id = 0
                while True:
                    ret, my_frame = vid_cap.read()
                    if img_cropped(my_frame) is not None:
                        img_id += 1
                        face = cv2.resize(
                            img_cropped(my_frame), (400, 400))
                        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
                        img_strd_path = r"C:\Users\HP\face_recognition_system\images_taken\user." +str(id)+"."+str(img_id)+".jpg"
                        cv2.imwrite(img_strd_path, face)
                        cv2.putText(face, str(img_id), (50, 50),
                                    cv2.FONT_HERSHEY_COMPLEX, 2, (0, 255, 0), 2)
                        cv2.imshow("Crooped Face", face)

                    if cv2.waitKey(1) == 13 or int(img_id) == 100:
                        break
                vid_cap.release()
                cv2.destroyAllWindows()
                messagebox.showinfo(
                    "Collected", "Images Collection completed successfully")

            except Exception as e:
                messagebox.showerror("Error", f"Due to : {str(e)}")


if __name__ == "__main__":
    root = Tk()
    obj = Student(root)
    root.mainloop()
