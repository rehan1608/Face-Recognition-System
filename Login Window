from tkinter import*
from tkinter import ttk
from PIL import Image, ImageTk
from tkinter import messagebox
import time
from time import strftime
from datetime import datetime
import tkinter
import mysql.connector
from develper import Developer
from student_button import Student
import os
from train_data import Train
from recognise_face import Recognizer
from attendence import Attendence
from help import Help


def main():
    win = Tk()
    log_win = Login_window(win)
    win.mainloop()


class Login_window:
    def __init__(self, root):
        self.root = root
        self.root.title("Login/SignUp")
        self.root.geometry("1366x768+0+0")

        self.bg = ImageTk.PhotoImage(file=r"D:\face\clg_img\img\bg_login.jpg")
        lbl_bg = Label(self.root, image=self.bg)
        lbl_bg.place(x=0, y=0, relwidth=1, relheight=1)

        frame = Frame(self.root, bg="black")
        frame.place(x=500, y=150, width=330, height=430)

        user_img = Image.open(r"D:\face\clg_img\img\user-login.png")
        user_img = user_img.resize((90, 90), Image.ANTIALIAS)
        self.photoimage_user = ImageTk.PhotoImage(user_img)
        lbl_user = Label(image=self.photoimage_user, bg="black", borderwidth=0)
        lbl_user.place(x=620, y=155, width=90, height=90)

        get_str = Label(frame, text="Get Started", font=(
            "times new roman", 18, "bold"), fg="white", bg="black")
        get_str.place(x=105, y=95)

        # username Label and icon
        user_label = Label(frame, text="Usernmae", font=(
            "times new roman", 13, "bold"), fg="white", bg="black")
        user_label.place(x=50, y=145)
        self.txtuser = ttk.Entry(frame, font=("times new roman", 13, "bold"))
        self.txtuser.place(x=30, y=170, width=250, height=25)

        user_icon = Image.open(r"D:\face\clg_img\img\user_icon.jpg")
        user_icon = user_icon.resize((20, 13), Image.ANTIALIAS)
        self.photoicon_user = ImageTk.PhotoImage(user_icon)
        lbl_user_icon = Label(
            frame, image=self.photoicon_user, bg="black", borderwidth=0)
        lbl_user_icon.place(x=30, y=152, width=20, height=13)

        # password Label and icon
        pass_label = Label(frame, text="Password", font=(
            "times new roman", 13, "bold"), fg="white", bg="black")
        pass_label.place(x=50, y=210)
        self.txtpass = ttk.Entry(frame, font=("times new roman", 13, "bold"))
        self.txtpass.place(x=30, y=235, width=250, height=25)

        pass_icon = Image.open(r"D:\face\clg_img\img\pass_icon.png")
        pass_icon = pass_icon.resize((20, 13), Image.ANTIALIAS)
        self.photoicon_pass = ImageTk.PhotoImage(pass_icon)
        lbl_pass_icon = Label(
            frame, image=self.photoicon_pass, bg="black", borderwidth=0)
        lbl_pass_icon.place(x=30, y=217, width=20, height=13)

        # buttons
        login_but = Button(frame, command=self.login_button, text="Login", font=("times new roman", 13, "bold"), bd=3,
                           relief=RIDGE, fg="white", bg="red", activeforeground="white", activebackground="red")
        login_but.place(x=100, y=280, width=110, height=30)

        new_but = Button(frame, command=self.register_win, text="New User Register", font=("times new roman", 10, "bold"),
                         borderwidth=0, fg="white", bg="black", activeforeground="white", activebackground="black")
        new_but.place(x=17, y=330, width=140)

        forget_but = Button(frame, command=self.forg_pass, text="Forget Password", font=("times new roman", 10, "bold"),
                            borderwidth=0, fg="white", bg="black", activeforeground="white", activebackground="black")
        forget_but.place(x=11, y=350, width=140)

        # login working

    def register_win(self):
        self.new_win = Toplevel(self.root)
        self.app = Register(self.new_win)

    def login_button(self):
        if self.txtuser.get() == "" or self.txtpass.get() == "":
            messagebox.showerror(
                "Error", "Username and Password can't be empty")
        elif self.txtuser.get() == "Rehan" and self.txtpass.get() == "@INDIA12tnb":
            messagebox.showinfo(
                "Success", "Welcome to Face Recognition Automatic Attendence System")
        else:
            conn_database = mysql.connector.connect(
                host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
            my_cursor = conn_database.cursor()
            my_cursor.execute("select * from register where email=%s and pass=%s", (
                self.txtuser.get(),
                self.txtpass.get()
            ))
            rows = my_cursor.fetchone()
            if rows == None:
                messagebox.showerror("Invalid", "Check username and password")
            else:
                open_main = messagebox.askyesno(
                    "Warning!", "Access only for admin")
                if open_main > 0:
                    self.new_win = Toplevel(self.root)
                    self.app = face_recognition(self.new_win)
                else:
                    if not open_main:
                        return
            conn_database.commit()
            conn_database.close()

    # reset password
    def reset_pass(self):
        if self.combo_ssq.get() == "Select Qs.":
            messagebox.showerror(
                "Error", "Select valid security question", parent=self.root2)
        elif self.sqa.get() == "":
            messagebox.showerror(
                "Error", "Security answer can't be empty", parent=self.root2)
        elif self.new_pass.get() == "":
            messagebox.showerror(
                "Error", "New password can't be empty", parent=self.root2)
        else:
            conn_database = mysql.connector.connect(
                host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
            curs = conn_database.cursor()
            qry = (
                "select * from register where email=%s and securityQ=%s and securityA=%s")
            val = (self.txtuser.get(), self.combo_ssq.get(), self.sqa.get())
            curs.execute(qry, val)
            row = curs.fetchone()
            if row == None:
                messagebox.showerror(
                    "Check!", "Please check all the values correctly", parent=self.root2)
            else:
                qurey = ("update register set pass=%s where email=%s")
                values = (self.new_pass.get(), self.txtuser.get())
                curs.execute(qurey, values)

                conn_database.commit()
                conn_database.close()
                messagebox.showinfo(
                    "Success", "Password Reset successfull, Please login with new password", parent=self.root2)

                self.root2.destroy()

    def forg_pass(self):
        if self.txtuser.get() == "":
            messagebox.showerror(
                "Error", "Please enter correct email address to reset password", parent=self.root)
        else:
            conn_database = mysql.connector.connect(
                host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
            curs = conn_database.cursor()
            res_query = ("select * from register where email=%s")
            value = (self.txtuser.get(),)
            curs.execute(res_query, value)
            roww = curs.fetchone()

            if roww == None:
                messagebox.showerror(
                    "Username Error", "Please enter correct email address to reset password", parent=self.root)
            else:
                conn_database.close()
                self.root2 = Toplevel()
                self.root2.title("Reset Password")
                self.root2.geometry("330x440+500+160")

                l = Label(self.root2, text="Reset Password", font=(
                    "times new roman", 20, "bold"), fg="red", bg="white")
                l.place(x=0, y=10, relwidth=1)

                # select security qs
                ssq = Label(self.root2, text="Select Security Qs.",
                            font=("times new roman", 15, "bold"), bg="white")
                ssq.place(x=50, y=80)
                self.combo_ssq = ttk.Combobox(self.root2, font=(
                    "times new roman", 13, "bold"), state="readonly")
                self.combo_ssq["values"] = (
                    "Select Qs.", "Birth place", "Pet name", "Favourite game", "Favourite Book")
                self.combo_ssq.place(x=50, y=110, width=240)
                self.combo_ssq.current(0)
                # security answer
                sqa = Label(self.root2, text="Security Answer",
                            font=("times new roman", 15, "bold"), bg="white")
                sqa.place(x=50, y=150)
                self.sqa = ttk.Entry(self.root2, font=(
                    "times new roman", 15, "bold"))
                self.sqa.place(x=50, y=180, width=240)

                # new password
                new_pass = Label(self.root2, text="New Password",
                                 font=("times new roman", 15, "bold"), bg="white")
                new_pass.place(x=50, y=220)
                self.new_pass = ttk.Entry(self.root2, font=(
                    "times new roman", 15, "bold"))
                self.new_pass.place(x=50, y=250, width=240)

                # reset button
                btn = Button(self.root2, command=self.reset_pass, text="Reset", font=(
                    "times new roman", 15, "bold"), fg="white", bg="green")
                btn.place(x=120, y=320)


# seperate
class Register:
    def __init__(self, root):
        self.root = root
        self.root.title("New User Registeration")
        self.root.geometry("1366x768+0+0")

        # text variables
        self.var_fn = StringVar()
        self.var_ln = StringVar()
        self.var_cntct = StringVar()
        self.var_mail = StringVar()
        self.var_sq = StringVar()
        self.var_sa = StringVar()
        self.var_pass = StringVar()
        self.var_cnfpass = StringVar()

        self.bg_reg = ImageTk.PhotoImage(
            file=r"D:\face\clg_img\img\back_user.jpg")
        lbl_bg_reg = Label(self.root, image=self.bg_reg)
        lbl_bg_reg.place(x=0, y=0, relwidth=1, relheight=1)

        frame_reg = Frame(self.root, bg="black")
        frame_reg.place(x=80, y=150, width=400, height=500)
        reg_img1 = Image.open(
            r"D:\face\clg_img\img\yellow-quote-design_1319-167.jpg")
        reg_img1 = reg_img1.resize((400, 500), Image.ANTIALIAS)
        self.photoimage_reg1 = ImageTk.PhotoImage(reg_img1)
        lbl_reg1 = Label(frame_reg, image=self.photoimage_reg1,
                         bg="black", borderwidth=0)
        lbl_reg1.place(x=0, y=0, width=400, height=500)

        frame_reg_right = Frame(self.root, bg="white")
        frame_reg_right.place(x=480, y=150, width=750, height=500)

        lbl_bg_reg = Label(frame_reg_right, text="REGISTER HERE", font=(
            "times new roman", 20, "bold"), fg="darkgreen", bg="white")
        lbl_bg_reg.place(x=20, y=20)

        # labels and entries
        # first name
        fname = Label(frame_reg_right, text="First name", font=(
            "times new roman", 15, "bold"), bg="white")
        fname.place(x=50, y=90)
        self.fname = ttk.Entry(frame_reg_right, textvariable=self.var_fn, font=(
            "times new roman", 15, "bold"))
        self.fname.place(x=50, y=120, width=240)

        # last name
        lname = Label(frame_reg_right, text="Last name", font=(
            "times new roman", 15, "bold"), bg="white")
        lname.place(x=360, y=90)
        self.lname = ttk.Entry(frame_reg_right, textvariable=self.var_ln, font=(
            "times new roman", 15, "bold"))
        self.lname.place(x=360, y=120, width=240)

        # contact detail
        contact = Label(frame_reg_right, text="Contact No.", font=(
            "times new roman", 15, "bold"), bg="white")
        contact.place(x=50, y=160)
        self.contact = ttk.Entry(
            frame_reg_right, textvariable=self.var_cntct, font=("times new roman", 15, "bold"))
        self.contact.place(x=50, y=190, width=240)

        # email
        email = Label(frame_reg_right, text="E-mail",
                      font=("times new roman", 15, "bold"), bg="white")
        email.place(x=360, y=160)
        self.email = ttk.Entry(frame_reg_right, textvariable=self.var_mail, font=(
            "times new roman", 15, "bold"))
        self.email.place(x=360, y=190, width=240)

        # select security qs
        ssq = Label(frame_reg_right, text="Select Security Qs.",
                    font=("times new roman", 15, "bold"), bg="white")
        ssq.place(x=50, y=230)
        self.combo_ssq = ttk.Combobox(frame_reg_right, textvariable=self.var_sq, font=(
            "times new roman", 13, "bold"), state="readonly")
        self.combo_ssq["values"] = (
            "Select Qs.", "Birth place", "Pet name", "Favourite game", "Favourite Book")
        self.combo_ssq.place(x=50, y=260, width=240)
        self.combo_ssq.current(0)
        # security answer
        sqa = Label(frame_reg_right, text="Security Answer",
                    font=("times new roman", 15, "bold"), bg="white")
        sqa.place(x=360, y=230)
        self.sqa = ttk.Entry(frame_reg_right, textvariable=self.var_sa, font=(
            "times new roman", 15, "bold"))
        self.sqa.place(x=360, y=260, width=240)

        # password
        passw = Label(frame_reg_right, text="Password", font=(
            "times new roman", 15, "bold"), bg="white")
        passw.place(x=50, y=290)
        self.passs = ttk.Entry(frame_reg_right, textvariable=self.var_pass, font=(
            "times new roman", 15, "bold"))
        self.passs.place(x=50, y=320, width=240)

        # Confirm password
        cnfmpass = Label(frame_reg_right, text="Confirm Password", font=(
            "times new roman", 15, "bold"), bg="white")
        cnfmpass.place(x=360, y=290)
        self.cnfmpass = ttk.Entry(
            frame_reg_right, textvariable=self.var_cnfpass, font=("times new roman", 15, "bold"))
        self.cnfmpass.place(x=360, y=320, width=240)

        # Checkbutton
        self.var_check = IntVar()
        check_button = Checkbutton(frame_reg_right, variable=self.var_check, text="I agree to the terms and conditions", font=(
            "times new roman", 10, "bold"), onvalue=1, offvalue=0)
        check_button.place(x=50, y=360)

        # buttons
        reg_img = Image.open(r"D:\face\clg_img\img\register_now.jpg")
        reg_img = reg_img.resize((240, 60), Image.ANTIALIAS)
        self.photoimage_reg = ImageTk.PhotoImage(reg_img)
        b1 = Button(frame_reg_right, command=self.registeration, image=self.photoimage_reg,
                    borderwidth=0, cursor="hand2", bg="white", fg="white")
        b1.place(x=50, y=400, width=240, height=60)

        log_img = Image.open(r"D:\face\clg_img\img\login_but.jpg")
        log_img = log_img.resize((240, 60), Image.ANTIALIAS)
        self.photoimage_log = ImageTk.PhotoImage(log_img)
        b2 = Button(frame_reg_right, image=self.photoimage_log, command=self.return_login,
                    borderwidth=0, cursor="hand2", bg="white", fg="white")
        b2.place(x=360, y=400, width=240, height=60)

    # function working on button
    def registeration(self):
        if (self.var_fn.get() == "") or (self.var_mail.get() == "") or (self.var_sq.get == "Select Qs.") or (self.var_pass.get() == "") or (self.var_cnfpass.get() == "") or (self.var_sa.get() == "") or (self.var_cntct.get() == ""):
            messagebox.showerror(
                "Check!", "All fields are required", parent=self.root)
        elif (self.var_pass.get() != self.var_cnfpass.get()):
            messagebox.showerror(
                "Invalid", "Password and Confirm password must be same", parent=self.root)
        elif self.var_check.get() == 0:
            messagebox.showerror(
                "Checkbox!", "Please check the T&C checkbox", parent=self.root)
        else:
            conn_database = mysql.connector.connect(
                host="localhost", user="root", password="@INDIA 12 tnb", database="face_recognizer")
            cur = conn_database.cursor()
            query = ("select * from register where email=%s")
            value = (self.var_mail.get(),)
            cur.execute(query, value)
            row = cur.fetchone()
            if row != None:
                messagebox.showerror(
                    "Error", "User Already exist, Please use another Email", parent=self.root)
            else:
                cur.execute("insert into register values(%s,%s,%s,%s,%s,%s,%s)", (
                    self.var_fn.get(),
                    self.var_ln.get(),
                    self.var_cntct.get(),
                    self.var_mail.get(),
                    self.var_sq.get(),
                    self.var_sa.get(),
                    self.var_pass.get()
                ))
            conn_database.commit()
            conn_database.close()
            messagebox.showinfo(
                "Success", "Registered successfully, You can login now", parent=self.root)

    def return_login(self):
        self.root.destroy()

# main project


class face_recognition:
    def __init__(self, root):
        self.root = root
        self.root.geometry = ("1366x768+0+0")
        self.root.title("Face Recognition System")

        # first image
        img = Image.open(r"D:\face\clg_img\img\1st.jpg")
        img = img.resize((455, 115), Image.ANTIALIAS)
        self.photoimage = ImageTk.PhotoImage(img)

        f_lbl = Label(self.root, image=self.photoimage)
        f_lbl.place(x=0, y=0, width=455, height=115)

        # second image
        img1 = Image.open(r"D:\face\clg_img\img\facialrecognition.png")
        img1 = img1.resize((456, 115), Image.ANTIALIAS)
        self.photoimage1 = ImageTk.PhotoImage(img1)

        f_lbl1 = Label(self.root, image=self.photoimage1)
        f_lbl1.place(x=455, y=0, width=455, height=115)

        # third image
        img2 = Image.open(r"D:\face\clg_img\img\1st.jpg")
        img2 = img2.resize((455, 115), Image.ANTIALIAS)
        self.photoimage2 = ImageTk.PhotoImage(img2)

        f_lbl2 = Label(self.root, image=self.photoimage2)
        f_lbl2.place(x=911, y=0, width=456, height=115)

        # bg image
        img3 = Image.open(r"D:\face\clg_img\img\bg.jpg")
        img3 = img3.resize((1366, 653), Image.ANTIALIAS)
        self.photoimage3 = ImageTk.PhotoImage(img3)

        bg_img = Label(self.root, image=self.photoimage3)
        bg_img.place(x=0, y=115, width=1366, height=653)

        # title on bg image
        title_lbl = Label(bg_img, text="FACE RECOGNITION ATTENDANCE SYSTEM SOFTWARE",
                          font=("times new roman", 30, "bold"), bg="white", fg="red")
        title_lbl.place(x=0, y=0, width=1366, height=38)

        # time
        def time():
            current = strftime('%H:%M:%S %p')
            lbl.config(text=current)
            lbl.after(1000, time)

        lbl = Label(title_lbl, font=("times new roman",
                                     10, "bold"), bg="white", fg="blue")
        lbl.place(x=0, y=0, width=80, height=35)
        time()

        # student button
        img4 = Image.open(r"D:\face\clg_img\img\details.png")
        img4 = img4.resize((185, 185), Image.ANTIALIAS)
        self.photoimage4 = ImageTk.PhotoImage(img4)

        b1 = Button(bg_img, image=self.photoimage4,
                    command=self.student1_details, cursor="hand2")
        b1.place(x=175, y=88, width=185, height=185)

        b1_1 = Button(bg_img, text="Student Details", command=self.student1_details, cursor="hand2",
                      font=("times new roman", 13, "bold"),
                      bg="darkblue", fg="white")
        b1_1.place(x=175, y=273, width=185, height=35)

        # detect face button
        img5 = Image.open(r"D:\face\clg_img\img\face_detector1.jpg")
        img5 = img5.resize((185, 185), Image.ANTIALIAS)
        self.photoimage5 = ImageTk.PhotoImage(img5)

        b2 = Button(bg_img, image=self.photoimage5,
                    cursor="hand2", command=self.face_recog)
        b2.place(x=470, y=88, width=185, height=185)

        b2_2 = Button(bg_img, text="Face Detector", cursor="hand2", command=self.face_recog, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b2_2.place(x=470, y=273, width=185, height=35)

        # Attendance button
        img6 = Image.open(r"D:\face\clg_img\img\smart-attendance.jpg")
        img6 = img6.resize((185, 185), Image.ANTIALIAS)
        self.photoimage6 = ImageTk.PhotoImage(img6)

        b3 = Button(bg_img, image=self.photoimage6,
                    cursor="hand2", command=self.att_endence)
        b3.place(x=755, y=88, width=185, height=185)

        b3_3 = Button(bg_img, text="Attendance", cursor="hand2", command=self.att_endence, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b3_3.place(x=755, y=273, width=185, height=35)

        # Help Desk button
        img7 = Image.open(r"D:\face\clg_img\img\help.jpg")
        img7 = img7.resize((185, 185), Image.ANTIALIAS)
        self.photoimage7 = ImageTk.PhotoImage(img7)

        b4 = Button(bg_img, image=self.photoimage7,
                    cursor="hand2", command=self.he_lp)
        b4.place(x=1040, y=88, width=185, height=185)

        b4_4 = Button(bg_img, text="Help Desk", cursor="hand2", command=self.he_lp, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b4_4.place(x=1040, y=273, width=185, height=35)

        # Train face button
        img8 = Image.open(r"D:\face\clg_img\img\train_data.jpg")
        img8 = img8.resize((185, 185), Image.ANTIALIAS)
        self.photoimage8 = ImageTk.PhotoImage(img8)

        b5 = Button(bg_img, image=self.photoimage8,
                    cursor="hand2", command=self.data_training)
        b5.place(x=175, y=340, width=185, height=185)

        b5_5 = Button(bg_img, text="Train Data", cursor="hand2", command=self.data_training, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b5_5.place(x=175, y=525, width=185, height=35)

        # Photos button
        img9 = Image.open(r"D:\face\clg_img\img\photosss.jpg")
        img9 = img9.resize((185, 185), Image.ANTIALIAS)
        self.photoimage9 = ImageTk.PhotoImage(img9)

        b6 = Button(bg_img, image=self.photoimage9,
                    cursor="hand2", command=self.open_img)
        b6.place(x=470, y=340, width=185, height=185)

        b6_6 = Button(bg_img, text="Photos", cursor="hand2", command=self.open_img, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b6_6.place(x=470, y=525, width=185, height=35)

        # Developer button
        img10 = Image.open(r"D:\face\clg_img\img\developer_cntct.jpg")
        img10 = img10.resize((185, 185), Image.ANTIALIAS)
        self.photoimage10 = ImageTk.PhotoImage(img10)

        b7 = Button(bg_img, image=self.photoimage10,
                    cursor="hand2", command=self.developer)
        b7.place(x=755, y=340, width=185, height=185)

        b7_7 = Button(bg_img, text="Developer", cursor="hand2", command=self.developer, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b7_7.place(x=755, y=525, width=185, height=35)

        # Exit button
        img11 = Image.open(r"D:\face\clg_img\img\exit.jpg")
        img11 = img11.resize((185, 185), Image.ANTIALIAS)
        self.photoimage11 = ImageTk.PhotoImage(img11)

        b8 = Button(bg_img, image=self.photoimage11,
                    cursor="hand2", command=self.exit_window)
        b8.place(x=1040, y=340, width=185, height=185)

        b8_8 = Button(bg_img, text="Exit", cursor="hand2", command=self.exit_window, font=("times new roman", 13, "bold"), bg="darkblue",
                      fg="white")
        b8_8.place(x=1040, y=525, width=185, height=35)

    def open_img(self):
        os.startfile(r"C:\Users\HP\face_recognition_system\images_taken")

    def student1_details(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Student(self.new_window)
        # os.system("python student_button.py")

    def data_training(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Train(self.new_window)

    def face_recog(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Recognizer(self.new_window)

    def att_endence(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Attendence(self.new_window)

    def developer(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Developer(self.new_window)

    def he_lp(self):
        self.new_window = Toplevel(self.root)
        self.open_window = Help(self.new_window)

    def exit_window(self):
        self.exit_window = tkinter.messagebox.askyesno(
            "Exit", "Do you want to exit?", parent=self.root)
        if self.exit_window > 0:
            self.root.destroy()
        else:
            return


if __name__ == "__main__":
    main()
